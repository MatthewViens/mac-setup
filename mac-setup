#!/bin/bash

# Colors/Effects
RESET="$(tput sgr 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
WHITE="$(tput setab 7)"
BLACK="$(tput setab 0)"
CLEAR="$(tput clear)"
BOLD="$(tput bold)"
UNDERLINE="$(tput smul)"

# Packages
BREW_PACKAGES=(shellcheck tree wget neofetch cmatrix)
CASK_PACKAGES=(visual-studio-code gimp firefox-developer-edition iterm2 1password raycast obsidian steam)
DOCK_APPS=(
  /System/Applications/Launchpad.app
  /Applications/Firefox\ Developer\ Edition.app
  /System/Applications/Mail.app
  /Applications/Visual\ Studio\ Code.app
  /Applications/iTerm.app
  /Applications/Obsidian.app
  /System/Applications/Contacts.app
  /System/Applications/Calendar.app
  /System/Applications/Messages.app
  /System/Applications/FaceTime.app
  /System/Applications/Music.app
  /Applications/Steam.app
  /System/Applications/App\ Store.app
  /System/Applications/System\ Preferences.app
)

# Functions
function confirm() {
  case "$1" in
    [yY][eE][sS]|[yY])
    return 0;;
    *)
      echo -e "\nüëã That's all for now."
      exit;;
  esac
}

function run() {
  if $(eval "$1"); then echo ${GREEN} ‚úîÔ∏é ${RESET}; else echo ${RED} ‚úó ${RESET}; fi
  echo -e "\n"
}

function title() {
  echo -n "${UNDERLINE}"$1"...${RESET}" 
}

function newline_title() {
  echo "${UNDERLINE}"$1"...${RESET}" 
}

function add_app_to_dock() {
  for app in "${DOCK_APPS[@]}"; do defaults write com.apple.dock persistent-apps -array-add "<dict>
      <key>tile-data</key>
      <dict>
        <key>file-data</key>
        <dict>
          <key>_CFURLString</key>
          <string>${app}</string>
          <key>_CFURLStringType</key>
          <integer>0</integer>
        </dict>
      </dict>
    </dict>"
  done
}

read -rd '' ascii_data <<EOF
${GREEN}${BOLD}                    'c.           
                 ,xNMM.           
               .OMMMMo            
               OMMM0,             
     .;loddo:' loolloddol;.        ,dPYb,              ,dPYb, ,dPYb,
${YELLOW}   cKMMMMMMMMMMNWMMMMMMMMMM0:      IP''Yb              IP''Yb IP''Yb
 .KMMMMMMMMMMMMMMMMMMMMMMMWd.      I8  8I              I8  8I I8  8I
 XMMMMMMMMMMMMMMMMMMMMMMMX.        I8  8'              I8  8' I8  8'
${RED};MMMMMMMMMMMMMMMMMMMMMMMM:         I8 dPgg,    ,ggg,   I8 dP  I8 dP    ,ggggg,
:MMMMMMMMMMMMMMMMMMMMMMMM:         I8dP' '8I  i8' '8i  I8dP   I8dP    dP'  'Y8ggP
.MMMMMMMMMMMMMMMMMMMMMMMMX.        I8P    I8  I8, ,8I  I8P    I8P    i8'    ,8I
${MAGENTA} kMMMMMMMMMMMMMMMMMMMMMMMMWd.     ,d8     I8, Y8baP'  ,d8b,_ ,d8b,_ ,d8,   ,d8'
 .XMMMMMMMMMMMMMMMMMMMMMMMMMMk    88P     'Y8888P 88888P''Y888P''Y88P'Y88888P
  .XMMMMMMMMMMMMMMMMMMMMMMMMK.   -----------------------------------------------
${BLUE}    kMMMMMMMMMMMMMMMMMMMMMMd    ------------------------------------------------
     ;KMMMMMMMWXXWMMMMMMMk.    -------------------------------------------------
       .cooc,.    .,coo:.     --------------------------------------------------  
EOF

clear
echo -e "\n\n$ascii_data"
echo -e "${RESET}\n\n"
echo -e "${BOLD}üíª üéä  Welcome to your new Mac  üéâ üñ•\n\n${RESET}"
read -rp "ü§∑‚Äç‚ôÄÔ∏è This script will install your apps and set your configuration. [Y]es to continue, any other key to abort. " response
confirm "$response"
echo -e "\n"

sudo -v || exit
while true; do sudo -n true; sleep 60; kill -0 $$; done &>/dev/null &
start=$(date +%s)

title "Setting default Finder window"
run "defaults write com.apple.finder NewWindowTarget -string PfHm"

title "Disabling automatic rearrangement of Spaces"
run "defaults write com.apple.dock mru-spaces -int 0"

title "Setting Dock to autohide"
run "defaults write com.apple.dock autohide -int 1"

title "Disabling show recent items in dock"
run "defaults write com.apple.dock show-recents -int 0"

title "Setting minimize effect to scale"
run "defaults write com.apple.dock mineffect -string scale"

title "Disabling click wallpaper to reveal desktop"
run "defaults write com.apple.WindowManager EnableStandardClickToShowDesktop -int 0"

title "Restarting Dock"
run "killall Dock"

title "Restarting Finder"
run "killall Finder"

echo -e "Some preferences will require a reset before being reflected properly in Settings"
echo -e "\n"

newline_title "Installing Homebrew"
if type "brew" >/dev/null; then 
  echo "${YELLOW}[SKIPPED]: ${RESET}Homebrew is already installed"
else
  yes "" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/${USER}/.zprofile
  eval "$(/opt/homebrew/bin/brew shellenv)"
  source ~/.zprofile
  brew tap homebrew/cask-versions
fi
echo -e "\n"

newline_title "Installing CLI apps"
for app in "${BREW_PACKAGES[@]}"; do brew install "$app"; echo -e "\n"; done

newline_title "Installing Node Version Manager"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
source ~/.zprofile

newline_title "Installing current Node via NVM"
nvm install node

newline_title "Installing applications"
for app in "${CASK_PACKAGES[@]}"; do brew install "$app"; echo -e "\n"; done

newline_title "Downloading iTerm profile"
curl https://raw.githubusercontent.com/MatthewViens/mac-setup/master/iterm-profiles.json > $HOME/iterm-profiles.json

newline_title "Configuring Dock items"
defaults delete com.apple.dock persistent-apps
add_app_to_dock
killall Dock

end=$(date +%s)
runtime=$((end-start))

echo -e "\n‚åõÔ∏è Total Time: $runtime seconds"
echo -e "\nüëã That's all for now."
